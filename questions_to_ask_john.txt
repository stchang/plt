1) what is the significance of the special values (list 3) and (cons 3 empty) in reset-special-values and find-special-value in reconstruct.rkt


2) what does double-break do? (used in let statements?)

2a) what are the differences between all the break types


3) is there any way for the stepper to save stepper properties across a step?
for example, a let statement steps to a series of defines and I want to know when the defines come from a particular let (ie - the let introduced by !*app in lazy.rkt) so I can hide them


4) what is the "held" list?
A) to show the "before step (?) (this is from the comments in model.rkt)


5) how exactly does a break work? (how does the break fn in model.rkt::go work?)

5a) what is a pre-break? (result-exp-break)
A) in annotate/inner, pre-break? is initially #f, but gets set to #t in tail-recur and lambda-body-recur; use wcm-pre-break-wrap instead of wcm-wrap if pre-break? = #t



6) How do app steps get generated?: (normal-break, result-value-break,) ..., result-exp-break



7) examples where there is no normal-break (ie - due to unannotated code)