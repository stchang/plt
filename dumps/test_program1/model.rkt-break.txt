-----result-exp-break, result-value-break-----
right side:
  (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda () (let-val
ues (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
skipped step
-----expr-finished-break-----
add to finished:
  source:(define-values (f) (#%app lazy-proc (lambda (x) (#%app lazy (lambda ()
(let-values (((p) (#%app ! +)) ((temp1) (quote 1)) ((x2) x)) (if (if (#%app lazy
-proc? p) (quote #t) (#%app struct-constructor-procedure? p)) (#%app p temp1 x2)
 (#%app p (#%app ! temp1) (#%app ! x2)))))))))
  index:#f
  getter:(#<procedure:...ts\lazy\lazy.rkt:199:20>)
-----expr-finished-break-----
add to finished:
  source:((p) (#%app ! (#%top . f)))
  index:(0)
  getter:(#<procedure:...ts\lazy\lazy.rkt:199:20>)
add to finished:
  source:((temp6) (quote 10))
  index:(0)
  getter:(10)
-----normal-break, normal-break/values-----
left side:
  (#%plain-app p temp6)
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----result-exp-break, result-value-break-----
right side:
  (#%plain-app (#%plain-lambda (x) (#%app lazy (#%plain-lambda () (let-values ((
(p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))) temp6)
held
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----normal-break, normal-break/values-----
left side:
  (#%plain-app (#%plain-lambda (x) (#%app lazy (#%plain-lambda () (let-values ((
(p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))) temp6)
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----result-exp-break, result-value-break-----
right side:
  (#%plain-app (#%plain-lambda (x) (#%app lazy (#%plain-lambda () (let-values ((
(p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))) (quote 10))
held
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----normal-break, normal-break/values-----
left side:
  (#%plain-app (#%plain-lambda (x) (#%app lazy (#%plain-lambda () (let-values ((
(p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))) (quote 10))
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----result-exp-break, result-value-break-----
right side:
  (#%plain-app ... (#%app lazy (#%plain-lambda () (let-values (((p) +) ((temp1)
(quote 1)) ((x2) (quote 10))) (#%app p temp1 x2)))) ...)
held
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----result-exp-break, result-value-break-----
right side:
  (#%plain-app ... (quote (delay ...)) ...)
skipped step
-----result-exp-break, result-value-break-----
right side:
  (quote (delay ...))
no sexp
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----result-exp-break, result-value-break-----
right side:
  (let-values (((p) +) ((temp1) (quote 1)) ((x2) (quote 10))) (#%app p temp1 x2)
)
no sexp
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----expr-finished-break-----
add to finished:
  source:((p) (#%app ! +))
  index:(0)
  getter:(#<procedure:+>)
add to finished:
  source:((temp1) (quote 1))
  index:(0)
  getter:(1)
add to finished:
  source:((x2) x)
  index:(0)
  getter:(10)
-----normal-break, normal-break/values-----
left side:
  (#%plain-app p temp1 x2)
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----reconstruct-all-completed-----
preunwound: (define-values (p) +)
-----reconstruct-all-completed-----
preunwound: (define-values (temp1) (quote 1))
-----reconstruct-all-completed-----
preunwound: (define-values (x2) (quote 10))
-----result-exp-break, result-value-break-----
right side:
  (#%plain-app + temp1 x2)
held
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----reconstruct-all-completed-----
preunwound: (define-values (p) +)
-----reconstruct-all-completed-----
preunwound: (define-values (temp1) (quote 1))
-----reconstruct-all-completed-----
preunwound: (define-values (x2) (quote 10))
-----normal-break, normal-break/values-----
left side:
  (#%plain-app + temp1 x2)
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----reconstruct-all-completed-----
preunwound: (define-values (p) +)
-----reconstruct-all-completed-----
preunwound: (define-values (temp1) (quote 1))
-----reconstruct-all-completed-----
preunwound: (define-values (x2) (quote 10))
-----result-exp-break, result-value-break-----
right side:
  (#%plain-app + (quote 1) x2)
held
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----reconstruct-all-completed-----
preunwound: (define-values (p) +)
-----reconstruct-all-completed-----
preunwound: (define-values (temp1) (quote 1))
-----reconstruct-all-completed-----
preunwound: (define-values (x2) (quote 10))
-----normal-break, normal-break/values-----
left side:
  (#%plain-app + (quote 1) x2)
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----reconstruct-all-completed-----
preunwound: (define-values (p) +)
-----reconstruct-all-completed-----
preunwound: (define-values (temp1) (quote 1))
-----reconstruct-all-completed-----
preunwound: (define-values (x2) (quote 10))
-----result-exp-break, result-value-break-----
right side:
  (#%plain-app + (quote 1) (quote 10))
held
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----reconstruct-all-completed-----
preunwound: (define-values (p) +)
-----reconstruct-all-completed-----
preunwound: (define-values (temp1) (quote 1))
-----reconstruct-all-completed-----
preunwound: (define-values (x2) (quote 10))
-----normal-break, normal-break/values-----
left side:
  (#%plain-app + (quote 1) (quote 10))
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----reconstruct-all-completed-----
preunwound: (define-values (p) +)
-----reconstruct-all-completed-----
preunwound: (define-values (temp1) (quote 1))
-----reconstruct-all-completed-----
preunwound: (define-values (x2) (quote 10))
-----result-exp-break, result-value-break-----
right side:
  (quote 11)
held
-----reconstruct-all-completed-----
preunwound: (define-values (f) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (p) (#%plain-lambda (x) (#%app lazy (#%plain-lambda (
) (let-values (((p) +) ((temp1) (quote 1)) ((x2) x)) (#%app p temp1 x2))))))
-----reconstruct-all-completed-----
preunwound: (define-values (temp6) (quote 10))
-----reconstruct-all-completed-----
preunwound: (define-values (p) +)
-----reconstruct-all-completed-----
preunwound: (define-values (temp1) (quote 1))
-----reconstruct-all-completed-----
preunwound: (define-values (x2) (quote 10))
